
----------------------------
--- PROCEDIMIENTOS
----------------------------

CREATE OR ALTER PROCEDURE  PA_LISTAR_PELICULAS
AS
BEGIN
    SELECT 
        p.cod_peli,
        p.nom_peli,
        p.desc_peli,
		p.anio_peli,
		P.cod_idio,
        i.nom_idio,
        p.dur_peli,
        p.pre_peli,
        p.stk_peli
    FROM Peliculas p
    INNER JOIN Idiomas i
        ON p.cod_idio = i.cod_idio;
END
GO

CREATE OR ALTER PROCEDURE  PA_LISTAR_IDIOMAS
AS
BEGIN
    SELECT cod_idio, nom_idio
    FROM Idiomas
END
GO

CREATE OR ALTER PROCEDURE  PA_GRABAR_PELICULA
	@cod_peli INT,
    @nom_peli NVARCHAR(128),       
    @desc_peli NVARCHAR(1000),     
    @anio_peli INT,   
    @cod_idio INT,
    @dur_peli INT,                 
    @pre_peli DECIMAL(10,2),       
    @stk_peli INT                  
AS
BEGIN
    IF @cod_peli <>0
    BEGIN
        UPDATE Peliculas
        SET 
            nom_peli = @nom_peli,
            desc_peli = @desc_peli,
            cod_idio = @cod_idio,
            anio_peli = @anio_peli,
            dur_peli = @dur_peli,
            pre_peli = @pre_peli,
            stk_peli = @stk_peli
        WHERE cod_peli = @cod_peli;

    END
    ELSE
		BEGIN
        INSERT INTO Peliculas (nom_peli, desc_peli, cod_idio, anio_peli, dur_peli, pre_peli, stk_peli)
        VALUES (@nom_peli, @desc_peli, @cod_idio, @anio_peli, @dur_peli, @pre_peli, @stk_peli);
    END
END
GO

CREATE OR ALTER PROCEDURE PA_ACTUALIZAR_PELICULA
    @cod_peli INT,
    @nom_peli NVARCHAR(128),       
    @desc_peli NVARCHAR(1000),     
    @anio_peli INT,   
    @cod_idio INT,
    @dur_peli INT,                 
    @pre_peli DECIMAL(10,2),       
    @stk_peli INT                  
AS
BEGIN
    -- Verificar que el código de la película no sea nulo o cero
    IF @cod_peli IS NULL OR @cod_peli = 0
    BEGIN
        RAISERROR ('El código de la película es obligatorio para actualizar.', 16, 1);
        RETURN;
    END

    -- Actualizar la película
    UPDATE Peliculas
    SET 
        nom_peli = @nom_peli,
        desc_peli = @desc_peli,
        anio_peli = @anio_peli,
        cod_idio = @cod_idio,
        dur_peli = @dur_peli,
        pre_peli = @pre_peli,
        stk_peli = @stk_peli
    WHERE cod_peli = @cod_peli;

    -- Verificar si se realizó la actualización
    IF @@ROWCOUNT = 0
    BEGIN
        RAISERROR ('No se encontró una película con el código proporcionado.', 16, 1);
    END
END
GO

CREATE OR ALTER PROCEDURE PA_AGREGAR_AL_CARRITO
    @cod_peli INT,
    @cantidad INT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM Carrito WHERE cod_peli = @cod_peli)
    BEGIN
        -- Incrementar la cantidad
        UPDATE Carrito
        SET cantidad = cantidad + @cantidad
        WHERE cod_peli = @cod_peli;
    END
    ELSE
    BEGIN
        -- Insertar nueva película
        INSERT INTO Carrito (cod_peli, cantidad)
        VALUES (@cod_peli, @cantidad);
    END
END
GO

CREATE OR ALTER PROCEDURE PA_EDITAR_CANTIDAD_CARRITO
    @cod_peli INT,
    @nueva_cantidad INT
AS
BEGIN
    IF @nueva_cantidad = 0
    BEGIN
        -- Eliminar del carrito si la cantidad es 0
        DELETE FROM Carrito
        WHERE cod_peli = @cod_peli;
    END
    ELSE
    BEGIN
        -- Actualizar la cantidad
        UPDATE Carrito
        SET cantidad = @nueva_cantidad
        WHERE cod_peli = @cod_peli;
    END
END
GO

CREATE OR ALTER PROCEDURE PA_ELIMINAR_DEL_CARRITO
    @cod_peli INT
AS
BEGIN
    DELETE FROM Carrito
    WHERE cod_peli = @cod_peli;
END
GO

CREATE OR ALTER PROCEDURE PA_LISTAR_CARRITO
AS
BEGIN
    SELECT 
        c.cod_peli,
        p.nom_peli,
        c.cantidad,
        p.pre_peli,
        (c.cantidad * p.pre_peli) AS subtotal
    FROM Carrito c
    INNER JOIN Peliculas p ON c.cod_peli = p.cod_peli;
END
GO


CREATE OR ALTER PROCEDURE PA_ELIMINAR_PELICULA
	@cod_peli INT               
AS
BEGIN
    DELETE FROm Peliculas WHERE cod_peli = @cod_peli;
END
GO

CREATE OR ALTER PROCEDURE  PA_REGISTRAR_VENTA
    @order_number INT,
    @cod_peli INT,
    @cantidad INT,
    @first_name VARCHAR(50),
    @last_name VARCHAR(50),
    @card_number CHAR(16),
    @card_expiry DATE,
    @card_cvv CHAR(3),
    @address VARCHAR(255)
AS
BEGIN
    BEGIN TRANSACTION;

    -- Verificar que haya suficiente stock
    IF EXISTS (SELECT 1 FROM Peliculas WHERE cod_peli = @cod_peli AND stk_peli >= @cantidad)
    BEGIN
        -- Insertar la venta en la tabla Sales
        INSERT INTO Sales (order_number, cod_peli, cantidad, first_name, last_name, card_number, card_expiry, card_cvv, address)
        VALUES (@order_number, @cod_peli, @cantidad, @first_name, @last_name, @card_number, @card_expiry, @card_cvv, @address);

        -- Actualizar el stock de la película
        UPDATE Peliculas
        SET stk_peli = stk_peli - @cantidad
        WHERE cod_peli = @cod_peli;

        COMMIT TRANSACTION;

        PRINT 'Venta registrada exitosamente.';
    END
    ELSE
    BEGIN
        ROLLBACK TRANSACTION;
        PRINT 'Error: Stock insuficiente para la película seleccionada.';
    END
END
GO

/*
EXEC PA_REGISTRAR_VENTA
    @order_number = 1005,
    @cod_peli = 5,
    @cantidad = 1,
    @first_name = 'Andrea',
    @last_name = 'Pirlo',
    @card_number = '11111111111',
    @card_expiry = '2023-12-31',
    @card_cvv = '111',
    @address = 'PERU';
*/

CREATE OR ALTER PROCEDURE  PA_LISTAR_VENTAS
AS
BEGIN
    SELECT 
        s.sale_id,
        s.order_number,
        s.cod_peli,
        p.nom_peli AS nombre,
        s.cantidad,
        p.pre_peli AS precio,
        s.first_name,
        s.last_name,
        s.address,
        s.sale_date,
        (s.cantidad * p.pre_peli) AS total
    FROM Sales s
    INNER JOIN Peliculas p ON s.cod_peli = p.cod_peli;
END
GO

CREATE OR ALTER PROCEDURE  PA_ELIMINAR_TODO_CARRITO
AS
BEGIN
    DELETE FROM Carrito
END
GO
